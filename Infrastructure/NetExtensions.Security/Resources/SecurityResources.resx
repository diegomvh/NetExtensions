<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MessageAdamConnectionStringNotSpecified" xml:space="preserve">
    <value>ConnectionString not specified.</value>
  </data>
  <data name="MessageAdamSIDConvertionFailed" xml:space="preserve">
    <value>Error converting SID to string: {0}.</value>
  </data>
  <data name="MessageAppServiceDisabled" xml:space="preserve">
    <value>{0} is disabled.</value>
  </data>
  <data name="MessageAzManAccessCheckFailed" xml:space="preserve">
    <value>AccessCheck failed.</value>
  </data>
  <data name="MessageAzManAnExceptionOccured" xml:space="preserve">
    <value>An exception occured.</value>
  </data>
  <data name="MessageAzManApplicationNameNotSpecified" xml:space="preserve">
    <value>AzMan application name not specified.</value>
  </data>
  <data name="MessageAzManConnectionStringNotSpecified" xml:space="preserve">
    <value>ConnectionString not specified.</value>
  </data>
  <data name="MessageAzManGetOperationsFailed" xml:space="preserve">
    <value>AzMan GetOperations failed.</value>
  </data>
  <data name="MessageAzManHelperInitializeFailed" xml:space="preserve">
    <value>Failed to initialize AzManHelper.</value>
  </data>
  <data name="MessageAzManInvalidConnectionString" xml:space="preserve">
    <value>Cannot load Azman Role Policy: invalid ConnectionString {0}.</value>
  </data>
  <data name="MessageAzManParameterArrayCannotBeEmpty" xml:space="preserve">
    <value>{0} cannot be empty.</value>
  </data>
  <data name="MessageAzManParameterArrayCannotContainDuplicates" xml:space="preserve">
    <value>{0} cannot contain duplicates.</value>
  </data>
  <data name="MessageAzManParameterCannotContainCommas" xml:space="preserve">
    <value>{0} cannot contain commas.</value>
  </data>
  <data name="MessageAzManParameterIsEmpty" xml:space="preserve">
    <value>{0} cannot be empty.</value>
  </data>
  <data name="MessageAzManParameterTooLong" xml:space="preserve">
    <value>{0} cannot exceed {1} characters.</value>
  </data>
  <data name="MessageAzManRoleAlreadyExists" xml:space="preserve">
    <value>{0} role already exists.</value>
  </data>
  <data name="MessageAzManRoleDoesNotExist" xml:space="preserve">
    <value>{0} role does not exist.</value>
  </data>
  <data name="MessageAzManRoleIsNotEmpty" xml:space="preserve">
    <value>{0} role is not empty.</value>
  </data>
  <data name="MessageAzManUpdateCacheFailed" xml:space="preserve">
    <value>Update AzMan cache failed</value>
  </data>
  <data name="MessageAzManUserDoesNotExist" xml:space="preserve">
    <value>{0} user does not exist</value>
  </data>
  <data name="MessagePermissionAccessDeniedInvalidPrincipal" xml:space="preserve">
    <value>Access is denied. Security principal should be a AmxPrincipal type.</value>
  </data>
  <data name="MessagePermissionAccessDeniedUserCannotAccess" xml:space="preserve">
    <value>Access is denied. Security principal does not satisfy required operations.</value>
  </data>
  <data name="MessagePermissionAccessDeniedUserNotAuthenticated" xml:space="preserve">
    <value>Access is denied. Security principal is not authenticated.</value>
  </data>
  <data name="MessagePolicyNoIdentityFound" xml:space="preserve">
    <value>No Identity found.</value>
  </data>
  <data name="MessageRoleProviderNotFound" xml:space="preserve">
    <value>RoleProvider not found.</value>
  </data>
  <data name="MessageRolesFeatureNotEnabled" xml:space="preserve">
    <value>Roles feature not enabled.</value>
  </data>
  <data name="MessageUnhandledException" xml:space="preserve">
    <value>An unhandled exception occured. Please check with your administrator.</value>
  </data>
  <data name="MessageUserIsNotAuthenticated" xml:space="preserve">
    <value>The User is not authenticated.</value>
  </data>
</root>